# -*- coding: utf-8 -*-
"""Water Track Back End Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m2GaSNsIRliysLhAMQCMwrzkuUnUPw4-
"""

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy import Column, Integer, Float, DateTime, create_engine, func
from sqlalchemy.orm import sessionmaker, Session, declarative_base
from datetime import datetime



# Database setup
DATABASE_URL = #"[PLACEHOLDER]"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Water Intake Table
class WaterIntake(Base):
    __tablename__ = "water_intake"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True)
    amount_ml = Column(Float, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(bind=engine)

# FastAPI instance
app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# API Endpoints
@app.post("/water-intake/")
def add_water_intake(user_id: int, amount_ml: float, db: Session = Depends(get_db)):
    """Store a new water intake entry."""
    # Check for positive number
    if amount_ml <= 0:
        raise HTTPException(status_code=400, detail="Amount must be positive.")
    # Entry
    entry = WaterIntake(user_id=user_id, amount_ml=amount_ml)
    # Push
    db.add(entry)
    db.commit()
    db.refresh(entry)
    return {"message": "Water intake recorded successfully", "entry": entry}

@app.get("/water-intake/{user_id}")
def get_water_intake(user_id: int, db: Session = Depends(get_db)):
    """Retrieve water intake logs for a user."""
    # Intake by user ID
    logs = db.query(WaterIntake).filter(WaterIntake.user_id == user_id).all()
    return {"user_id": user_id, "water_intake_logs": logs}

@app.get("/water-intake/summary/{user_id}")
def get_water_intake_summary(user_id: int, db: Session = Depends(get_db)):
    """Get daily average water intake for a user."""
    summary = (
        # Query, filter by ID, group by date
        db.query(func.date(WaterIntake.timestamp), func.sum(WaterIntake.amount_ml))
        .filter(WaterIntake.user_id == user_id)
        .group_by(func.date(WaterIntake.timestamp))
        .all()
    )
    return {"user_id": user_id, "daily_summary": summary}

pip install fastapi uvicorn sqlalchemy sqlite-utils

